// 1. **서버 컴포넌트용 데이터 페칭 함수 생성**
    
//     `utils/serverApi.ts` 파일에 **서버 컴포넌트**에서 사용할 데이터 페칭 함수를 작성합니다. 예를 들어, 챔피언 목록과 상세 정보를 가져오는 함수를 정의합니다.
    
//     <aside>
//     ⚠️
    
//     밑에 요약을 해두긴 했지만, https://developer.riotgames.com/docs/lol 해당 사이트에 들어가서, 어떻게 해당 데이터들을 받아 올 수 있을 지 확인해보세요!
    
//     </aside>
    
//     ### **챔피언 목록 API**
    
//     - **HTTP 메서드**: `GET`
//     - **기능**: 모든 챔피언의 기본 정보를 가져옵니다.
//     - **구현 방법**:
//         1. **Data Dragon API의 버전 정보 가져오기**
//             - `https://ddragon.leagueoflegends.com/api/versions.json` 엔드포인트를 호출하여 사용 가능한 버전 목록을 가져옵니다.
//             - 최신 버전은 배열의 첫 번째 요소입니다.
//         2. **챔피언 목록 데이터 가져오기**
//             - 엔드포인트: `https://ddragon.leagueoflegends.com/cdn/{version}/data/ko_KR/champion.json`
//             - 응답 데이터에서 `data` 필드를 추출하면 챔피언들의 상세 정보가 객체 형태로 담겨 있습니다.
        
//         > 💡 추가 힌트:
//         > 
//         > - 에러 처리를 위해 `try-catch` 구문을 사용하고, 적절한 상태 코드를 반환합니다.
//         > - TypeScript로 응답 데이터의 타입을 명시하여 타입 안전성을 확보합니다.
//         > - Server Actions를 활용하여 서버 컴포넌트 내에서 직접 데이터를 페칭하고 처리합니다.
    
//     ### **특정 챔피언 상세 정보 API 엔드포인트**
    
//     - **HTTP 메서드**: `GET`
//     - **기능**: 특정 챔피언의 상세 정보를 가져옵니다.
//     - **구현 방법**:
//         1. **특정 챔피언 상세 정보 가져오기**
//             - 엔드포인트: `https://ddragon.leagueoflegends.com/cdn/{version}/data/ko_KR/champion/{id}.json`
//             - 응답 데이터에서 `data` 필드를 추출하고, 그 안에서 챔피언 ID에 해당하는 데이터를 가져옵니다.
        
//         > 💡 추가 힌트:
//         > 
//         > - 경로 매개변수 `id`의 타입을 명시하여 타입 안전성을 확보합니다.
//         > - 챔피언 ID가 유효하지 않을 경우 적절한 에러 메시지와 상태 코드를 반환합니다.
//         > - Server Actions를 활용하여 서버 컴포넌트 내에서 직접 데이터를 페칭하고 처리합니다.
    
//     ### **아이템 목록 API 엔드포인트**
    
//     - **HTTP 메서드**: `GET`
//     - **기능**: 모든 아이템의 기본 정보를 가져옵니다.
//     - **구현 방법**:
//         1. **아이템 목록 데이터 가져오기**
//             - 엔드포인트: `https://ddragon.leagueoflegends.com/cdn/{version}/data/ko_KR/item.json`
//             - 응답 데이터에서 `data` 필드를 추출합니다.